/*
 * This source file was generated by the Gradle 'init' task
 */
package ticket.booking;

import ticket.booking.entities.Ticket;
import ticket.booking.entities.Train;
import ticket.booking.entities.User;
import ticket.booking.services.TrainService;
import ticket.booking.services.UserBookingService;

import java.io.IOException;
import java.time.ZonedDateTime;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.util.List;
import java.util.Map;
import java.util.Scanner;
import java.util.UUID;

public class App {
    public static void main(String[] args) {
        System.out.println("================| TRAIN BOOKING SYSTEM |================");
        Scanner scanner = new Scanner(System.in);
        int option = 0;

        UserBookingService userBookingService;
        TrainService trainService;

        try {
            userBookingService = new UserBookingService();
            trainService = new TrainService();
        } catch (Exception e) {
            System.out.println("Exception occurred during startup: " + e);
            return;
        }

        String username = null, password = null;
        String source = null, destination = null;
        long selectedTrain = -1L;

        while (option != 7) {
            System.out.printf("1. Signup%n" +
                    "2. Login%n" +
                    "3. Fetch bookings%n" +
                    "4. Search Trains%n" +
                    "5. Book a seat%n" +
                    "6. Cancel booking%n" +
                    "7. Exit%n");
            System.out.print("Choose an option [1-7]: ");
            option = scanner.nextInt();
            switch (option) {
                case 1:
                    System.out.println("Enter username: ");
                    username = scanner.next();
                    System.out.println("Enter password: ");
                    password = scanner.next();
                    Boolean signupSuccess = userBookingService.signup(new User(username, password));
                    if (signupSuccess) {
                        System.out.printf("User " + username + " created\n\n");
                    } else {
                        System.out.println("Could not sign up.");
                    }
                    break;
                case 2:
                    System.out.println("Enter username: ");
                    username = scanner.next();
                    System.out.println("Enter password: ");
                    password = scanner.next();
                    Boolean loginSuccess = userBookingService.login(username, password);
                    if (loginSuccess) {
                        System.out.println("User " + username + " signed in");
                    } else {
                        System.out.println("User " + username + " could not sign in. Try again.");
                    }
                    break;
                case 3:
                    userBookingService.fetchBookings();
                    break;
                case 4:
                    System.out.print("Enter place of departure: ");
                    source = scanner.next();
                    System.out.print("Enter destination: ");
                    destination = scanner.next();
                    List<Train> searchTrains = trainService.fetchTrains(source, destination);
                    if (searchTrains.isEmpty()) {
                        System.out.println("No trains found.");
                    } else {
                        for(Train t: searchTrains) {
                            System.out.println("Train number " + t.getTrainNumber());
                            for(Map.Entry<String, String> stationSchedule: t.getStationSchedules().entrySet()) {
                                System.out.println("\tstation:" + stationSchedule.getKey() + " time: " + stationSchedule.getValue());
                            }
                        }
                        System.out.println("Select a train out of the above");
                        selectedTrain = scanner.nextInt();
                        System.out.println("Selected " + selectedTrain);
                        break;
                    }
                    break;
                case 5:
                    if (selectedTrain == -1L) {
                        System.out.println("No train selected.");
                    } else {
                        Train train = trainService.fetchTrain(selectedTrain);
                        int count = 0;
                        for(int i=0;i<train.getSeats().size();i++) {
                            List<Integer> row = train.getSeats().get(i);
                            for(int j=0;j<row.size();j++) {
                                int status = row.get(j);
                                if (status == 0) {
                                    ++count;
                                    System.out.println("row " + i + ", seat " + j);
                                }
                            }
                        }

                        if (count == 0) {
                            System.out.println("No seats available");
                        } else {
                            System.out.println("Select one of the available seats");
                            System.out.print("Enter row: ");
                            int r = scanner.nextInt();
                            System.out.print("Enter seat number: ");
                            int c = scanner.nextInt();
                            int status = train.getSeats().get(r).get(c);
                            System.out.print("Enter date of travel [yyyy-mm-DDTHH:MM:ssZ]");
                            String travelTime = null;
                            while (travelTime == null) {
                                try {
                                    travelTime = scanner.next();
                                    ZonedDateTime.parse(travelTime, DateTimeFormatter.ISO_DATE_TIME);
                                } catch (DateTimeParseException e) {
                                    System.out.println("Invalid date entered. Please enter valid date in yyyy-mm-DDTHH:MM:ssZ format.");
                                    travelTime = null;
                                }
                            }
                            if (status == 0 && source != null && destination != null) {
                                try {
                                    Ticket ticket = new Ticket(UUID.randomUUID().toString(), userBookingService.getUserId(), source, destination, travelTime, train);
                                    train.getSeats().get(r).set(c, 1);
                                    trainService.saveTrainlistToFile();
                                    userBookingService.bookTicket(ticket);
                                    System.out.println("Row " + r + ", seat " + c + " is now booked.");
                                } catch (IOException e) {
                                    System.out.println("Exception occurred while saving train details: " + e);
                                    train.getSeats().get(r).set(c, 0);
                                } catch (IllegalAccessException e) {
                                    System.out.println("User is not logged in : " + e);
                                    train.getSeats().get(r).set(c, 0);
                                    break;
                                }
                            } else {
                                System.out.println("Sorry. This seat is not available, please choose from the above available seats.");
                            }
                        }
                    }
                    break;
                case 6:
                    System.out.println("Enter your booking number: ");
                    String ticketNumber = scanner.next();
                    try {
                        Boolean status = userBookingService.cancelTicket(ticketNumber);
                        if (status) {
                            System.out.println("Ticket " + ticketNumber + " cancelled for user " + userBookingService.getUserId());
                        }
                    } catch (IllegalAccessException e) {
                        System.out.println("Exception occurred while cancelling booking: " + e);
                    }
                    break;
                case 7:
                    System.out.println("Exiting...");
                    break;
                default:
                    System.out.println("Invalid option. Try again.");
                    break;
            }
        }
    }
}
